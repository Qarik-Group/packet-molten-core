etcd:
  # All options get passed as command line flags to etcd.
  # Any information inside curly braces comes from the machine at boot time.

  # multi_region and multi_cloud deployments need to use {PUBLIC_IPV4}
  advertise_client_urls:       "http://{PRIVATE_IPV4}:2379"
  initial_advertise_peer_urls: "http://{PRIVATE_IPV4}:2380"
  # listen on both the official ports and the legacy ports
  # legacy ports can be omitted if your application doesn't depend on them
  listen_client_urls:          "http://0.0.0.0:2379"
  listen_peer_urls:            "http://{PRIVATE_IPV4}:2380"
  # generate a new token for each unique cluster from https://discovery.etcd.io/new?size=3
  # specify the initial size of your cluster with ?size=X
  discovery:                   "${discovery_url}"

storage:
  files:
  - path: /var/ssl/docker/ca.pem
    filesystem: root
    contents:
      inline: "${docker_ca}"
    mode: 0644
    user: { id: 500 }
    group: { id: 500 }
  - path: /var/ssl/docker/cert.pem
    filesystem: root
    contents:
      inline: "${docker_cert}"
    mode: 0644
    user: { id: 500 }
    group: { id: 500 }
  - path: /var/ssl/docker/key.pem
    filesystem: root
    contents:
      inline: "${docker_key}"
    mode: 0644
    user: { id: 500 }
    group: { id: 500 }

systemd:
  units:
  - name: flanneld.service
    dropins:
    - name: 50-network-config.conf
      contents: |
        [Service]
        ExecStartPre=/usr/bin/etcdctl set /coreos.com/network/config '{ "Network": "10.1.0.0/16" }'
  - name: docker.service
    dropins:
    - name: 50-enable-tls.conf
      contents: |
        [Service]
        Environment=DOCKER_OPTS='--tlsverify --tlscacert=/var/ssl/docker/ca.pem --tlscert=/var/ssl/docker/cert.pem --tlskey=/var/ssl/docker/key.pem -H fd:// -H {PUBLIC_IPV4}:4243'

flannel: ~
